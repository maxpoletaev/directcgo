//go:build amd64 && !windows

// Code generated by directcgo. DO NOT EDIT.
// directcgo -arch=amd64,arm64 ./testsuite/asm

#include "go_asm.h"
#include "textflag.h"
#include "funcdata.h"

// PassIntegers func(fn unsafe.Pointer, i32 int32, i64 int64, i16 int16, i8 int8)
TEXT ·PassIntegers(SB), $65536-27
	MOVQ    fn+0(FP), AX
	MOVLQSX i32+8(FP), DI
	MOVQ    i64+16(FP), SI
	MOVWQSX i16+24(FP), DX
	MOVBQSX i8+26(FP), CX
	MOVL    $0xC6D19920, R10
	MOVL    R10, 8(SP)
	MOVQ    SP, R12
	LEAQ    65536(SP), SP
	ANDQ    $~15, SP
	CALL    AX
	MOVQ    R12, SP
	MOVL    8(SP), R10
	CMPL    R10, $0xC6D19920
	JNE     overflow
	RET
overflow:
	CALL    runtime·abort(SB)
	RET

// PassUnsignedIntegers func(fn unsafe.Pointer, u32 uint32, u64 uint64, u8 uint8, u16 uint16)
TEXT ·PassUnsignedIntegers(SB), $65536-28
	MOVQ    fn+0(FP), AX
	MOVLQZX u32+8(FP), DI
	MOVQ    u64+16(FP), SI
	MOVBQZX u8+24(FP), DX
	MOVWQZX u16+26(FP), CX
	MOVL    $0x670ACF42, R10
	MOVL    R10, 8(SP)
	MOVQ    SP, R12
	LEAQ    65536(SP), SP
	ANDQ    $~15, SP
	CALL    AX
	MOVQ    R12, SP
	MOVL    8(SP), R10
	CMPL    R10, $0x670ACF42
	JNE     overflow
	RET
overflow:
	CALL    runtime·abort(SB)
	RET

// PassFloats func(fn unsafe.Pointer, f32_0 float32, f64_0 float64, f64_1 float64, f32_1 float32)
TEXT ·PassFloats(SB), $65536-36
	MOVQ    fn+0(FP), AX
	MOVSS   f32_0+8(FP), X0
	MOVSD   f64_0+16(FP), X1
	MOVSD   f64_1+24(FP), X2
	MOVSS   f32_1+32(FP), X3
	MOVL    $0xE1698026, R10
	MOVL    R10, 8(SP)
	MOVQ    SP, R12
	LEAQ    65536(SP), SP
	ANDQ    $~15, SP
	CALL    AX
	MOVQ    R12, SP
	MOVL    8(SP), R10
	CMPL    R10, $0xE1698026
	JNE     overflow
	RET
overflow:
	CALL    runtime·abort(SB)
	RET

// PassMixedNumbers func(fn unsafe.Pointer, i8 int8, f32 float32, u32 uint32, f64 float64, i64 int64)
TEXT ·PassMixedNumbers(SB), $65536-40
	MOVQ    fn+0(FP), AX
	MOVBQSX i8+8(FP), DI
	MOVSS   f32+12(FP), X0
	MOVLQZX u32+16(FP), SI
	MOVSD   f64+24(FP), X1
	MOVQ    i64+32(FP), DX
	MOVL    $0x789D86F2, R10
	MOVL    R10, 8(SP)
	MOVQ    SP, R12
	LEAQ    65536(SP), SP
	ANDQ    $~15, SP
	CALL    AX
	MOVQ    R12, SP
	MOVL    8(SP), R10
	CMPL    R10, $0x789D86F2
	JNE     overflow
	RET
overflow:
	CALL    runtime·abort(SB)
	RET

// ReturnUInt8 func(fn unsafe.Pointer) uint8
TEXT ·ReturnUInt8(SB), $65536-9
	MOVQ    fn+0(FP), AX
	MOVL    $0x75A9BBE5, R10
	MOVL    R10, 8(SP)
	MOVQ    SP, R12
	LEAQ    65536(SP), SP
	ANDQ    $~15, SP
	CALL    AX
	MOVQ    R12, SP
	MOVL    8(SP), R10
	CMPL    R10, $0x75A9BBE5
	JNE     overflow
	MOVB    AX, ret+8(FP)
	RET
overflow:
	CALL    runtime·abort(SB)
	RET

// ReturnInt8 func(fn unsafe.Pointer) int8
TEXT ·ReturnInt8(SB), $65536-9
	MOVQ    fn+0(FP), AX
	MOVL    $0x5FAABDC3, R10
	MOVL    R10, 8(SP)
	MOVQ    SP, R12
	LEAQ    65536(SP), SP
	ANDQ    $~15, SP
	CALL    AX
	MOVQ    R12, SP
	MOVL    8(SP), R10
	CMPL    R10, $0x5FAABDC3
	JNE     overflow
	MOVB    AX, ret+8(FP)
	RET
overflow:
	CALL    runtime·abort(SB)
	RET

// ReturnUInt32 func(fn unsafe.Pointer) uint32
TEXT ·ReturnUInt32(SB), $65536-12
	MOVQ    fn+0(FP), AX
	MOVL    $0x9A4A4DFC, R10
	MOVL    R10, 8(SP)
	MOVQ    SP, R12
	LEAQ    65536(SP), SP
	ANDQ    $~15, SP
	CALL    AX
	MOVQ    R12, SP
	MOVL    8(SP), R10
	CMPL    R10, $0x9A4A4DFC
	JNE     overflow
	MOVL    AX, ret+8(FP)
	RET
overflow:
	CALL    runtime·abort(SB)
	RET

// ReturnInt32 func(fn unsafe.Pointer) int32
TEXT ·ReturnInt32(SB), $65536-12
	MOVQ    fn+0(FP), AX
	MOVL    $0x4053603F, R10
	MOVL    R10, 8(SP)
	MOVQ    SP, R12
	LEAQ    65536(SP), SP
	ANDQ    $~15, SP
	CALL    AX
	MOVQ    R12, SP
	MOVL    8(SP), R10
	CMPL    R10, $0x4053603F
	JNE     overflow
	MOVL    AX, ret+8(FP)
	RET
overflow:
	CALL    runtime·abort(SB)
	RET

// ReturnUInt64 func(fn unsafe.Pointer) uint64
TEXT ·ReturnUInt64(SB), $65536-16
	MOVQ    fn+0(FP), AX
	MOVL    $0xE0E6EC6C, R10
	MOVL    R10, 8(SP)
	MOVQ    SP, R12
	LEAQ    65536(SP), SP
	ANDQ    $~15, SP
	CALL    AX
	MOVQ    R12, SP
	MOVL    8(SP), R10
	CMPL    R10, $0xE0E6EC6C
	JNE     overflow
	MOVQ    AX, ret+8(FP)
	RET
overflow:
	CALL    runtime·abort(SB)
	RET

// ReturnInt64 func(fn unsafe.Pointer) int64
TEXT ·ReturnInt64(SB), $65536-16
	MOVQ    fn+0(FP), AX
	MOVL    $0x7CBD3763, R10
	MOVL    R10, 8(SP)
	MOVQ    SP, R12
	LEAQ    65536(SP), SP
	ANDQ    $~15, SP
	CALL    AX
	MOVQ    R12, SP
	MOVL    8(SP), R10
	CMPL    R10, $0x7CBD3763
	JNE     overflow
	MOVQ    AX, ret+8(FP)
	RET
overflow:
	CALL    runtime·abort(SB)
	RET

// ReturnFloat func(fn unsafe.Pointer) float32
TEXT ·ReturnFloat(SB), $65536-12
	MOVQ    fn+0(FP), AX
	MOVL    $0xDB9516A, R10
	MOVL    R10, 8(SP)
	MOVQ    SP, R12
	LEAQ    65536(SP), SP
	ANDQ    $~15, SP
	CALL    AX
	MOVQ    R12, SP
	MOVL    8(SP), R10
	CMPL    R10, $0xDB9516A
	JNE     overflow
	MOVSS   X0, ret+8(FP)
	RET
overflow:
	CALL    runtime·abort(SB)
	RET

// ReturnDouble func(fn unsafe.Pointer) float64
TEXT ·ReturnDouble(SB), $65536-16
	MOVQ    fn+0(FP), AX
	MOVL    $0x7199815, R10
	MOVL    R10, 8(SP)
	MOVQ    SP, R12
	LEAQ    65536(SP), SP
	ANDQ    $~15, SP
	CALL    AX
	MOVQ    R12, SP
	MOVL    8(SP), R10
	CMPL    R10, $0x7199815
	JNE     overflow
	MOVSD   X0, ret+8(FP)
	RET
overflow:
	CALL    runtime·abort(SB)
	RET

// PassSmallStructIntegers func(fn unsafe.Pointer, s SmallStructIntegers)
TEXT ·PassSmallStructIntegers(SB), $65536-26
	MOVQ    fn+0(FP), AX
	MOVQ    s_0+8(FP), DI
	MOVQ    s_1+16(FP), SI
	MOVL    $0x75523D7C, R10
	MOVL    R10, 8(SP)
	MOVQ    SP, R12
	LEAQ    65536(SP), SP
	ANDQ    $~15, SP
	CALL    AX
	MOVQ    R12, SP
	MOVL    8(SP), R10
	CMPL    R10, $0x75523D7C
	JNE     overflow
	RET
overflow:
	CALL    runtime·abort(SB)
	RET

// PassSmallStructFloats func(fn unsafe.Pointer, s SmallStructFloats)
TEXT ·PassSmallStructFloats(SB), $65536-32
	MOVQ    fn+0(FP), AX
	MOVSS   s_F32+8(FP), X0
	MOVSD   s_F64+16(FP), X1
	MOVL    $0x213F9C4D, R10
	MOVL    R10, 8(SP)
	MOVQ    SP, R12
	LEAQ    65536(SP), SP
	ANDQ    $~15, SP
	CALL    AX
	MOVQ    R12, SP
	MOVL    8(SP), R10
	CMPL    R10, $0x213F9C4D
	JNE     overflow
	RET
overflow:
	CALL    runtime·abort(SB)
	RET

// PassSmallStructMixed func(fn unsafe.Pointer, s SmallStructMixed)
TEXT ·PassSmallStructMixed(SB), $65536-30
	MOVQ    fn+0(FP), AX
	MOVQ    s_0+8(FP), DI
	MOVQ    s_1+16(FP), SI
	MOVL    $0x6B32CEA2, R10
	MOVL    R10, 8(SP)
	MOVQ    SP, R12
	LEAQ    65536(SP), SP
	ANDQ    $~15, SP
	CALL    AX
	MOVQ    R12, SP
	MOVL    8(SP), R10
	CMPL    R10, $0x6B32CEA2
	JNE     overflow
	RET
overflow:
	CALL    runtime·abort(SB)
	RET

// AddTwoNumbers func(fn unsafe.Pointer, a uint32, b uint32) uint32
TEXT ·AddTwoNumbers(SB), $65536-20
	MOVQ    fn+0(FP), AX
	MOVLQZX a+8(FP), DI
	MOVLQZX b+12(FP), SI
	MOVL    $0x5BB53061, R10
	MOVL    R10, 8(SP)
	MOVQ    SP, R12
	LEAQ    65536(SP), SP
	ANDQ    $~15, SP
	CALL    AX
	MOVQ    R12, SP
	MOVL    8(SP), R10
	CMPL    R10, $0x5BB53061
	JNE     overflow
	MOVL    AX, ret+16(FP)
	RET
overflow:
	CALL    runtime·abort(SB)
	RET
