//go:build arm64 && !windows

// Code generated by directcgo. DO NOT EDIT.
// directcgo -arch=amd64,arm64 ./testsuite/asm

#include "go_asm.h"
#include "textflag.h"
#include "funcdata.h"

// PassIntegers func(fn unsafe.Pointer, i32 int32, i64 int64, i16 int16, i8 int8)
TEXT ·PassIntegers(SB), $65536-27
	MOVD    fn+0(FP), R9
	MOVW    i32+8(FP), R0
	MOVD    i64+16(FP), R1
	MOVH    i16+24(FP), R2
	MOVB    i8+26(FP), R3
	MOVD    $0x240117F1, R10
	MOVD    R10, 8(RSP)
	MOVD    RSP, R20
	MOVD    $65536, R10
	ADD     R10, RSP
	MOVD    RSP, R10
	AND     $~15, R10, RSP
	BL      (R9)
	MOVD    R20, RSP
	MOVD    8(RSP), R10
	MOVD    $0x240117F1, R11
	CMP     R10, R11
	BNE     overflow
	RET
overflow:
	CALL    runtime·abort(SB)
	RET

// PassUnsignedIntegers func(fn unsafe.Pointer, u32 uint32, u64 uint64, u8 uint8, u16 uint16)
TEXT ·PassUnsignedIntegers(SB), $65536-28
	MOVD    fn+0(FP), R9
	MOVWU   u32+8(FP), R0
	MOVD    u64+16(FP), R1
	MOVBU   u8+24(FP), R2
	MOVHU   u16+26(FP), R3
	MOVD    $0x69A76EC, R10
	MOVD    R10, 8(RSP)
	MOVD    RSP, R20
	MOVD    $65536, R10
	ADD     R10, RSP
	MOVD    RSP, R10
	AND     $~15, R10, RSP
	BL      (R9)
	MOVD    R20, RSP
	MOVD    8(RSP), R10
	MOVD    $0x69A76EC, R11
	CMP     R10, R11
	BNE     overflow
	RET
overflow:
	CALL    runtime·abort(SB)
	RET

// PassFloats func(fn unsafe.Pointer, f32_0 float32, f64_0 float64, f64_1 float64, f32_1 float32)
TEXT ·PassFloats(SB), $65536-36
	MOVD    fn+0(FP), R9
	FMOVS   f32_0+8(FP), F0
	FMOVD   f64_0+16(FP), F1
	FMOVD   f64_1+24(FP), F2
	FMOVS   f32_1+32(FP), F3
	MOVD    $0x1C9B5C6C, R10
	MOVD    R10, 8(RSP)
	MOVD    RSP, R20
	MOVD    $65536, R10
	ADD     R10, RSP
	MOVD    RSP, R10
	AND     $~15, R10, RSP
	BL      (R9)
	MOVD    R20, RSP
	MOVD    8(RSP), R10
	MOVD    $0x1C9B5C6C, R11
	CMP     R10, R11
	BNE     overflow
	RET
overflow:
	CALL    runtime·abort(SB)
	RET

// PassMixedNumbers func(fn unsafe.Pointer, i8 int8, f32 float32, u32 uint32, f64 float64, i64 int64)
TEXT ·PassMixedNumbers(SB), $65536-40
	MOVD    fn+0(FP), R9
	MOVB    i8+8(FP), R0
	FMOVS   f32+12(FP), F0
	MOVWU   u32+16(FP), R1
	FMOVD   f64+24(FP), F1
	MOVD    i64+32(FP), R2
	MOVD    $0xFEF0BCF1, R10
	MOVD    R10, 8(RSP)
	MOVD    RSP, R20
	MOVD    $65536, R10
	ADD     R10, RSP
	MOVD    RSP, R10
	AND     $~15, R10, RSP
	BL      (R9)
	MOVD    R20, RSP
	MOVD    8(RSP), R10
	MOVD    $0xFEF0BCF1, R11
	CMP     R10, R11
	BNE     overflow
	RET
overflow:
	CALL    runtime·abort(SB)
	RET

// ReturnUInt8 func(fn unsafe.Pointer) uint8
TEXT ·ReturnUInt8(SB), $65536-9
	MOVD    fn+0(FP), R9
	MOVD    $0xEE6C95AB, R10
	MOVD    R10, 8(RSP)
	MOVD    RSP, R20
	MOVD    $65536, R10
	ADD     R10, RSP
	MOVD    RSP, R10
	AND     $~15, R10, RSP
	BL      (R9)
	MOVD    R20, RSP
	MOVD    8(RSP), R10
	MOVD    $0xEE6C95AB, R11
	CMP     R10, R11
	BNE     overflow
	MOVB    R0, ret+8(FP)
	RET
overflow:
	CALL    runtime·abort(SB)
	RET

// ReturnInt8 func(fn unsafe.Pointer) int8
TEXT ·ReturnInt8(SB), $65536-9
	MOVD    fn+0(FP), R9
	MOVD    $0xA560090D, R10
	MOVD    R10, 8(RSP)
	MOVD    RSP, R20
	MOVD    $65536, R10
	ADD     R10, RSP
	MOVD    RSP, R10
	AND     $~15, R10, RSP
	BL      (R9)
	MOVD    R20, RSP
	MOVD    8(RSP), R10
	MOVD    $0xA560090D, R11
	CMP     R10, R11
	BNE     overflow
	MOVB    R0, ret+8(FP)
	RET
overflow:
	CALL    runtime·abort(SB)
	RET

// ReturnUInt32 func(fn unsafe.Pointer) uint32
TEXT ·ReturnUInt32(SB), $65536-12
	MOVD    fn+0(FP), R9
	MOVD    $0xE4999D49, R10
	MOVD    R10, 8(RSP)
	MOVD    RSP, R20
	MOVD    $65536, R10
	ADD     R10, RSP
	MOVD    RSP, R10
	AND     $~15, R10, RSP
	BL      (R9)
	MOVD    R20, RSP
	MOVD    8(RSP), R10
	MOVD    $0xE4999D49, R11
	CMP     R10, R11
	BNE     overflow
	MOVW    R0, ret+8(FP)
	RET
overflow:
	CALL    runtime·abort(SB)
	RET

// ReturnInt32 func(fn unsafe.Pointer) int32
TEXT ·ReturnInt32(SB), $65536-12
	MOVD    fn+0(FP), R9
	MOVD    $0xAF7531D7, R10
	MOVD    R10, 8(RSP)
	MOVD    RSP, R20
	MOVD    $65536, R10
	ADD     R10, RSP
	MOVD    RSP, R10
	AND     $~15, R10, RSP
	BL      (R9)
	MOVD    R20, RSP
	MOVD    8(RSP), R10
	MOVD    $0xAF7531D7, R11
	CMP     R10, R11
	BNE     overflow
	MOVW    R0, ret+8(FP)
	RET
overflow:
	CALL    runtime·abort(SB)
	RET

// ReturnUInt64 func(fn unsafe.Pointer) uint64
TEXT ·ReturnUInt64(SB), $65536-16
	MOVD    fn+0(FP), R9
	MOVD    $0x5DDDC5AD, R10
	MOVD    R10, 8(RSP)
	MOVD    RSP, R20
	MOVD    $65536, R10
	ADD     R10, RSP
	MOVD    RSP, R10
	AND     $~15, R10, RSP
	BL      (R9)
	MOVD    R20, RSP
	MOVD    8(RSP), R10
	MOVD    $0x5DDDC5AD, R11
	CMP     R10, R11
	BNE     overflow
	MOVD    R0, ret+8(FP)
	RET
overflow:
	CALL    runtime·abort(SB)
	RET

// ReturnInt64 func(fn unsafe.Pointer) int64
TEXT ·ReturnInt64(SB), $65536-16
	MOVD    fn+0(FP), R9
	MOVD    $0x5872BE1C, R10
	MOVD    R10, 8(RSP)
	MOVD    RSP, R20
	MOVD    $65536, R10
	ADD     R10, RSP
	MOVD    RSP, R10
	AND     $~15, R10, RSP
	BL      (R9)
	MOVD    R20, RSP
	MOVD    8(RSP), R10
	MOVD    $0x5872BE1C, R11
	CMP     R10, R11
	BNE     overflow
	MOVD    R0, ret+8(FP)
	RET
overflow:
	CALL    runtime·abort(SB)
	RET

// ReturnFloat func(fn unsafe.Pointer) float32
TEXT ·ReturnFloat(SB), $65536-12
	MOVD    fn+0(FP), R9
	MOVD    $0x86968568, R10
	MOVD    R10, 8(RSP)
	MOVD    RSP, R20
	MOVD    $65536, R10
	ADD     R10, RSP
	MOVD    RSP, R10
	AND     $~15, R10, RSP
	BL      (R9)
	MOVD    R20, RSP
	MOVD    8(RSP), R10
	MOVD    $0x86968568, R11
	CMP     R10, R11
	BNE     overflow
	FMOVS   F0, ret+8(FP)
	RET
overflow:
	CALL    runtime·abort(SB)
	RET

// ReturnDouble func(fn unsafe.Pointer) float64
TEXT ·ReturnDouble(SB), $65536-16
	MOVD    fn+0(FP), R9
	MOVD    $0x7CEA78D4, R10
	MOVD    R10, 8(RSP)
	MOVD    RSP, R20
	MOVD    $65536, R10
	ADD     R10, RSP
	MOVD    RSP, R10
	AND     $~15, R10, RSP
	BL      (R9)
	MOVD    R20, RSP
	MOVD    8(RSP), R10
	MOVD    $0x7CEA78D4, R11
	CMP     R10, R11
	BNE     overflow
	FMOVD   F0, ret+8(FP)
	RET
overflow:
	CALL    runtime·abort(SB)
	RET

// PassSmallStructIntegers func(fn unsafe.Pointer, s SmallStructIntegers)
TEXT ·PassSmallStructIntegers(SB), $65536-26
	MOVD    fn+0(FP), R9
	MOVD    s+8(FP), R0
	MOVD    s+16(FP), R1
	MOVD    $0x37D636B8, R10
	MOVD    R10, 8(RSP)
	MOVD    RSP, R20
	MOVD    $65536, R10
	ADD     R10, RSP
	MOVD    RSP, R10
	AND     $~15, R10, RSP
	BL      (R9)
	MOVD    R20, RSP
	MOVD    8(RSP), R10
	MOVD    $0x37D636B8, R11
	CMP     R10, R11
	BNE     overflow
	RET
overflow:
	CALL    runtime·abort(SB)
	RET

// PassSmallStructFloats func(fn unsafe.Pointer, s SmallStructFloats)
TEXT ·PassSmallStructFloats(SB), $65536-32
	MOVD    fn+0(FP), R9
	MOVD    s+8(FP), R0
	MOVD    s+16(FP), R1
	MOVD    $0x337DC413, R10
	MOVD    R10, 8(RSP)
	MOVD    RSP, R20
	MOVD    $65536, R10
	ADD     R10, RSP
	MOVD    RSP, R10
	AND     $~15, R10, RSP
	BL      (R9)
	MOVD    R20, RSP
	MOVD    8(RSP), R10
	MOVD    $0x337DC413, R11
	CMP     R10, R11
	BNE     overflow
	RET
overflow:
	CALL    runtime·abort(SB)
	RET

// PassSmallStructMixed func(fn unsafe.Pointer, s SmallStructMixed)
TEXT ·PassSmallStructMixed(SB), $65536-30
	MOVD    fn+0(FP), R9
	MOVD    s+8(FP), R0
	MOVD    s+16(FP), R1
	MOVD    $0xE3E36EAA, R10
	MOVD    R10, 8(RSP)
	MOVD    RSP, R20
	MOVD    $65536, R10
	ADD     R10, RSP
	MOVD    RSP, R10
	AND     $~15, R10, RSP
	BL      (R9)
	MOVD    R20, RSP
	MOVD    8(RSP), R10
	MOVD    $0xE3E36EAA, R11
	CMP     R10, R11
	BNE     overflow
	RET
overflow:
	CALL    runtime·abort(SB)
	RET

// AddTwoNumbers func(fn unsafe.Pointer, a uint32, b uint32) uint32
TEXT ·AddTwoNumbers(SB), $65536-20
	MOVD    fn+0(FP), R9
	MOVWU   a+8(FP), R0
	MOVWU   b+12(FP), R1
	MOVD    $0x6C85A1ED, R10
	MOVD    R10, 8(RSP)
	MOVD    RSP, R20
	MOVD    $65536, R10
	ADD     R10, RSP
	MOVD    RSP, R10
	AND     $~15, R10, RSP
	BL      (R9)
	MOVD    R20, RSP
	MOVD    8(RSP), R10
	MOVD    $0x6C85A1ED, R11
	CMP     R10, R11
	BNE     overflow
	MOVW    R0, ret+16(FP)
	RET
overflow:
	CALL    runtime·abort(SB)
	RET
